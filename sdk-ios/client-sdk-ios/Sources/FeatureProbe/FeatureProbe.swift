// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(FeatureProbeFFI)
import FeatureProbeFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_featureprobe_17ce_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_featureprobe_17ce_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
fileprivate class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        self.offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset..<offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        let _ = withUnsafeMutableBytes(of: &value, { data.copyBytes(to: $0, from: range)})
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> Array<UInt8> {
        let range = offset..<(offset+count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer({ buffer in
            data.copyBytes(to: buffer, from: range)
        })
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
fileprivate class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        self.bytes = []
        self.offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: Writer)
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    static func lift(_ buf: RustBuffer) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    static func lower(_ value: SwiftType) -> RustBuffer {
          let writer = Writer()
          write(value, into: writer)
          return RustBuffer(bytes: writer.bytes)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


public protocol FeatureProbeProtocol {
    func boolValue(key: String, defaultValue: Bool)  -> Bool
    func boolDetail(key: String, defaultValue: Bool)  -> FpBoolDetail
    func numberValue(key: String, defaultValue: Double)  -> Double
    func numberDetail(key: String, defaultValue: Double)  -> FpNumDetail
    func stringValue(key: String, defaultValue: String)  -> String
    func stringDetail(key: String, defaultValue: String)  -> FpStrDetail
    func jsonValue(key: String, defaultValue: String)  -> String
    func jsonDetail(key: String, defaultValue: String)  -> FpJsonDetail
    
}

public class FeatureProbe: FeatureProbeProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(config: FpConfig, user: FpUser)  {
        self.init(unsafeFromRawPointer: try!
    
    rustCall() {
    
    featureprobe_17ce_FeatureProbe_new(
        FfiConverterTypeFpConfig.lower(config), 
        FfiConverterTypeFpUser.lower(user), $0)
})
    }

    deinit {
        try! rustCall { ffi_featureprobe_17ce_FeatureProbe_object_free(pointer, $0) }
    }

    

    
    public func boolValue(key: String, defaultValue: Bool)  -> Bool {
        return try! FfiConverterBool.lift(
            try!
    rustCall() {
    
    featureprobe_17ce_FeatureProbe_bool_value(self.pointer, 
        FfiConverterString.lower(key), 
        FfiConverterBool.lower(defaultValue), $0
    )
}
        )
    }
    public func boolDetail(key: String, defaultValue: Bool)  -> FpBoolDetail {
        return try! FfiConverterTypeFpBoolDetail.lift(
            try!
    rustCall() {
    
    featureprobe_17ce_FeatureProbe_bool_detail(self.pointer, 
        FfiConverterString.lower(key), 
        FfiConverterBool.lower(defaultValue), $0
    )
}
        )
    }
    public func numberValue(key: String, defaultValue: Double)  -> Double {
        return try! FfiConverterDouble.lift(
            try!
    rustCall() {
    
    featureprobe_17ce_FeatureProbe_number_value(self.pointer, 
        FfiConverterString.lower(key), 
        FfiConverterDouble.lower(defaultValue), $0
    )
}
        )
    }
    public func numberDetail(key: String, defaultValue: Double)  -> FpNumDetail {
        return try! FfiConverterTypeFpNumDetail.lift(
            try!
    rustCall() {
    
    featureprobe_17ce_FeatureProbe_number_detail(self.pointer, 
        FfiConverterString.lower(key), 
        FfiConverterDouble.lower(defaultValue), $0
    )
}
        )
    }
    public func stringValue(key: String, defaultValue: String)  -> String {
        return try! FfiConverterString.lift(
            try!
    rustCall() {
    
    featureprobe_17ce_FeatureProbe_string_value(self.pointer, 
        FfiConverterString.lower(key), 
        FfiConverterString.lower(defaultValue), $0
    )
}
        )
    }
    public func stringDetail(key: String, defaultValue: String)  -> FpStrDetail {
        return try! FfiConverterTypeFpStrDetail.lift(
            try!
    rustCall() {
    
    featureprobe_17ce_FeatureProbe_string_detail(self.pointer, 
        FfiConverterString.lower(key), 
        FfiConverterString.lower(defaultValue), $0
    )
}
        )
    }
    public func jsonValue(key: String, defaultValue: String)  -> String {
        return try! FfiConverterString.lift(
            try!
    rustCall() {
    
    featureprobe_17ce_FeatureProbe_json_value(self.pointer, 
        FfiConverterString.lower(key), 
        FfiConverterString.lower(defaultValue), $0
    )
}
        )
    }
    public func jsonDetail(key: String, defaultValue: String)  -> FpJsonDetail {
        return try! FfiConverterTypeFpJsonDetail.lift(
            try!
    rustCall() {
    
    featureprobe_17ce_FeatureProbe_json_detail(self.pointer, 
        FfiConverterString.lower(key), 
        FfiConverterString.lower(defaultValue), $0
    )
}
        )
    }
    
}


fileprivate struct FfiConverterTypeFeatureProbe: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FeatureProbe

    static func read(from buf: Reader) throws -> FeatureProbe {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: FeatureProbe, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FeatureProbe {
        return FeatureProbe(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: FeatureProbe) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol FPUserProtocol {
    func setAttr(key: String, value: String) 
    
}

public class FpUser: FPUserProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(key: String)  {
        self.init(unsafeFromRawPointer: try!
    
    rustCall() {
    
    featureprobe_17ce_FPUser_new(
        FfiConverterString.lower(key), $0)
})
    }

    deinit {
        try! rustCall { ffi_featureprobe_17ce_FPUser_object_free(pointer, $0) }
    }

    

    
    public func setAttr(key: String, value: String)  {
        try!
    rustCall() {
    
    featureprobe_17ce_FPUser_set_attr(self.pointer, 
        FfiConverterString.lower(key), 
        FfiConverterString.lower(value), $0
    )
}
    }
    
}


fileprivate struct FfiConverterTypeFpUser: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FpUser

    static func read(from buf: Reader) throws -> FpUser {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: FpUser, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FpUser {
        return FpUser(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: FpUser) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol FPUrlProtocol {
    
}

public class FpUrl: FPUrlProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_featureprobe_17ce_FPUrl_object_free(pointer, $0) }
    }

    

    
    
}


fileprivate struct FfiConverterTypeFpUrl: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FpUrl

    static func read(from buf: Reader) throws -> FpUrl {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: FpUrl, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FpUrl {
        return FpUrl(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: FpUrl) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol FPUrlBuilderProtocol {
    func build()  -> FpUrl?
    
}

public class FpUrlBuilder: FPUrlBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(remoteUrl: String)  {
        self.init(unsafeFromRawPointer: try!
    
    rustCall() {
    
    featureprobe_17ce_FPUrlBuilder_new(
        FfiConverterString.lower(remoteUrl), $0)
})
    }

    deinit {
        try! rustCall { ffi_featureprobe_17ce_FPUrlBuilder_object_free(pointer, $0) }
    }

    

    
    public func build()  -> FpUrl? {
        return try! FfiConverterOptionTypeFpUrl.lift(
            try!
    rustCall() {
    
    featureprobe_17ce_FPUrlBuilder_build(self.pointer, $0
    )
}
        )
    }
    
}


fileprivate struct FfiConverterTypeFpUrlBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FpUrlBuilder

    static func read(from buf: Reader) throws -> FpUrlBuilder {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: FpUrlBuilder, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FpUrlBuilder {
        return FpUrlBuilder(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: FpUrlBuilder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol FPConfigProtocol {
    
}

public class FpConfig: FPConfigProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(remoteUrl: FpUrl, clientSdkKey: String, refreshInterval: UInt8, waitFirstResp: Bool)  {
        self.init(unsafeFromRawPointer: try!
    
    rustCall() {
    
    featureprobe_17ce_FPConfig_new(
        FfiConverterTypeFpUrl.lower(remoteUrl), 
        FfiConverterString.lower(clientSdkKey), 
        FfiConverterUInt8.lower(refreshInterval), 
        FfiConverterBool.lower(waitFirstResp), $0)
})
    }

    deinit {
        try! rustCall { ffi_featureprobe_17ce_FPConfig_object_free(pointer, $0) }
    }

    

    
    
}


fileprivate struct FfiConverterTypeFpConfig: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FpConfig

    static func read(from buf: Reader) throws -> FpConfig {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: FpConfig, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FpConfig {
        return FpConfig(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: FpConfig) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public struct FpBoolDetail {
    public var value: Bool
    public var ruleIndex: UInt16?
    public var version: UInt64?
    public var reason: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: Bool, ruleIndex: UInt16?, version: UInt64?, reason: String) {
        self.value = value
        self.ruleIndex = ruleIndex
        self.version = version
        self.reason = reason
    }
}


extension FpBoolDetail: Equatable, Hashable {
    public static func ==(lhs: FpBoolDetail, rhs: FpBoolDetail) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        if lhs.ruleIndex != rhs.ruleIndex {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        if lhs.reason != rhs.reason {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
        hasher.combine(ruleIndex)
        hasher.combine(version)
        hasher.combine(reason)
    }
}


fileprivate struct FfiConverterTypeFpBoolDetail: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> FpBoolDetail {
        return try FpBoolDetail(
            value: FfiConverterBool.read(from: buf), 
            ruleIndex: FfiConverterOptionUInt16.read(from: buf), 
            version: FfiConverterOptionUInt64.read(from: buf), 
            reason: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: FpBoolDetail, into buf: Writer) {
        FfiConverterBool.write(value.value, into: buf)
        FfiConverterOptionUInt16.write(value.ruleIndex, into: buf)
        FfiConverterOptionUInt64.write(value.version, into: buf)
        FfiConverterString.write(value.reason, into: buf)
    }
}

public struct FpNumDetail {
    public var value: Double
    public var ruleIndex: UInt16?
    public var version: UInt64?
    public var reason: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: Double, ruleIndex: UInt16?, version: UInt64?, reason: String) {
        self.value = value
        self.ruleIndex = ruleIndex
        self.version = version
        self.reason = reason
    }
}


extension FpNumDetail: Equatable, Hashable {
    public static func ==(lhs: FpNumDetail, rhs: FpNumDetail) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        if lhs.ruleIndex != rhs.ruleIndex {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        if lhs.reason != rhs.reason {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
        hasher.combine(ruleIndex)
        hasher.combine(version)
        hasher.combine(reason)
    }
}


fileprivate struct FfiConverterTypeFpNumDetail: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> FpNumDetail {
        return try FpNumDetail(
            value: FfiConverterDouble.read(from: buf), 
            ruleIndex: FfiConverterOptionUInt16.read(from: buf), 
            version: FfiConverterOptionUInt64.read(from: buf), 
            reason: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: FpNumDetail, into buf: Writer) {
        FfiConverterDouble.write(value.value, into: buf)
        FfiConverterOptionUInt16.write(value.ruleIndex, into: buf)
        FfiConverterOptionUInt64.write(value.version, into: buf)
        FfiConverterString.write(value.reason, into: buf)
    }
}

public struct FpStrDetail {
    public var value: String
    public var ruleIndex: UInt16?
    public var version: UInt64?
    public var reason: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: String, ruleIndex: UInt16?, version: UInt64?, reason: String) {
        self.value = value
        self.ruleIndex = ruleIndex
        self.version = version
        self.reason = reason
    }
}


extension FpStrDetail: Equatable, Hashable {
    public static func ==(lhs: FpStrDetail, rhs: FpStrDetail) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        if lhs.ruleIndex != rhs.ruleIndex {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        if lhs.reason != rhs.reason {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
        hasher.combine(ruleIndex)
        hasher.combine(version)
        hasher.combine(reason)
    }
}


fileprivate struct FfiConverterTypeFpStrDetail: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> FpStrDetail {
        return try FpStrDetail(
            value: FfiConverterString.read(from: buf), 
            ruleIndex: FfiConverterOptionUInt16.read(from: buf), 
            version: FfiConverterOptionUInt64.read(from: buf), 
            reason: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: FpStrDetail, into buf: Writer) {
        FfiConverterString.write(value.value, into: buf)
        FfiConverterOptionUInt16.write(value.ruleIndex, into: buf)
        FfiConverterOptionUInt64.write(value.version, into: buf)
        FfiConverterString.write(value.reason, into: buf)
    }
}

public struct FpJsonDetail {
    public var value: String
    public var ruleIndex: UInt16?
    public var version: UInt64?
    public var reason: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: String, ruleIndex: UInt16?, version: UInt64?, reason: String) {
        self.value = value
        self.ruleIndex = ruleIndex
        self.version = version
        self.reason = reason
    }
}


extension FpJsonDetail: Equatable, Hashable {
    public static func ==(lhs: FpJsonDetail, rhs: FpJsonDetail) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        if lhs.ruleIndex != rhs.ruleIndex {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        if lhs.reason != rhs.reason {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
        hasher.combine(ruleIndex)
        hasher.combine(version)
        hasher.combine(reason)
    }
}


fileprivate struct FfiConverterTypeFpJsonDetail: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> FpJsonDetail {
        return try FpJsonDetail(
            value: FfiConverterString.read(from: buf), 
            ruleIndex: FfiConverterOptionUInt16.read(from: buf), 
            version: FfiConverterOptionUInt64.read(from: buf), 
            reason: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: FpJsonDetail, into buf: Writer) {
        FfiConverterString.write(value.value, into: buf)
        FfiConverterOptionUInt16.write(value.ruleIndex, into: buf)
        FfiConverterOptionUInt64.write(value.version, into: buf)
        FfiConverterString.write(value.reason, into: buf)
    }
}
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    static func read(from buf: Reader) throws -> UInt8 {
        return try lift(buf.readInt())
    }

    static func write(_ value: UInt8, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    static func read(from buf: Reader) throws -> UInt16 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    static func read(from buf: Reader) throws -> UInt64 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    static func read(from buf: Reader) throws -> Double {
        return try lift(buf.readDouble())
    }

    static func write(_ value: Double, into buf: Writer) {
        buf.writeDouble(lower(value))
    }
}
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    static func write(_ value: Bool, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    static func read(from buf: Reader) throws -> String {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    static func write(_ value: String, into buf: Writer) {
        let len = Int32(value.utf8.count)
        buf.writeInt(len)
        buf.writeBytes(value.utf8)
    }
}
// Helper code for FpConfig class is found in ObjectTemplate.swift
// Helper code for FpUrl class is found in ObjectTemplate.swift
// Helper code for FpUrlBuilder class is found in ObjectTemplate.swift
// Helper code for FpUser class is found in ObjectTemplate.swift
// Helper code for FeatureProbe class is found in ObjectTemplate.swift
// Helper code for FpBoolDetail record is found in RecordTemplate.swift
// Helper code for FpJsonDetail record is found in RecordTemplate.swift
// Helper code for FpNumDetail record is found in RecordTemplate.swift
// Helper code for FpStrDetail record is found in RecordTemplate.swift

fileprivate struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterUInt16.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterUInt64.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeFpUrl: FfiConverterRustBuffer {
    typealias SwiftType = FpUrl?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeFpUrl.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFpUrl.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}


/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum FeatureProbeLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
        
        // No initialization code needed
        
    }
}